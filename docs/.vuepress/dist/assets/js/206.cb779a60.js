(window.webpackJsonp=window.webpackJsonp||[]).push([[206],{1871:function(t,e,v){"use strict";v.r(e);var s=v(17),n=Object(s.a)({},(function(){var t=this,e=t._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"事件"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#事件"}},[t._v("#")]),t._v(" 事件")]),t._v(" "),e("p",[t._v("javascript事件监听机制，可与java里面的监听器一样的机制理解，原理上都是一样的。类比总结如下。")]),t._v(" "),e("p",[t._v("javascript")]),t._v(" "),e("p",[e("img",{attrs:{src:v(815),alt:"image-20230903164757695"}})]),t._v(" "),e("p",[t._v("java的事件监听。类比下。")]),t._v(" "),e("h2",{attrs:{id:"java中的listener-监听器"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#java中的listener-监听器"}},[t._v("#")]),t._v(" Java中的Listener(监听器)")]),t._v(" "),e("ul",[e("li",[t._v("事件：servletContext对象被创建之后要执行什么代码，销毁之前要执行什么代码。")])]),t._v(" "),e("ul",[e("li",[e("p",[t._v("ServletContextListener:监听ServletContext对象的创建和销毁【事件的源】")]),t._v(" "),e("ul",[e("li",[t._v("方法：\n"),e("ul",[e("li",[t._v("void contextDestroyed(ServletContextEvent sce) ：ServletContext对象被销毁之前会调用该方法")]),t._v(" "),e("li",[t._v("void contextInitialized(ServletContextEvent sce) ：ServletContext对象创建后会调用该方法")])])])]),t._v(" "),e("p",[e("strong",[t._v("步骤：")])]),t._v(" "),e("ol",[e("li",[e("p",[t._v("定义一个类，实现ServletContextListener接口")])]),t._v(" "),e("li",[e("p",[t._v("复写方法")])]),t._v(" "),e("li",[e("p",[t._v("配置【相当于注册监听器】")])])]),t._v(" "),e("p",[t._v("配置web.xml文件")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[t._v("```xml\n<listener>\n     <listener-class>cn.itcast.web.listener.ContextLoaderListener</listener-class>\n</listener>\n* 指定初始化参数<context-param>\n```\n")])])])])]),t._v(" "),e("p",[t._v("​\t注解配置：")]),t._v(" "),e("p",[t._v("​\t\t\t\t@WebListener")])])}),[],!1,null,null,null);e.default=n.exports},815:function(t,e,v){t.exports=v.p+"assets/img/image-20230903164757695.29e61da5.png"}}]);