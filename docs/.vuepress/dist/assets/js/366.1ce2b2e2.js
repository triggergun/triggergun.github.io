(window.webpackJsonp=window.webpackJsonp||[]).push([[366],{2144:function(e,s,n){"use strict";n.r(s);var _=n(18),a=Object(_.a)({},(function(){var e=this,s=e._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[s("h1",{attrs:{id:"幽灵依赖是什么"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#幽灵依赖是什么"}},[e._v("#")]),e._v(" 幽灵依赖是什么？")]),e._v(" "),s("p",[e._v("为什么会发生幽灵依赖？")]),e._v(" "),s("h2",{attrs:{id:"_1-npm-yarn-的扁平化-node-modules-结构"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-npm-yarn-的扁平化-node-modules-结构"}},[e._v("#")]),e._v(" 1. npm/Yarn 的扁平化 "),s("code",[e._v("node_modules")]),e._v(" 结构")]),e._v(" "),s("ul",[s("li",[s("strong",[e._v("npm v3+ 和 Yarn")]),e._v(" 会将依赖的依赖（子依赖）"),s("strong",[e._v("平铺")]),e._v("在项目根目录的 "),s("code",[e._v("node_modules")]),e._v(" 中。")]),e._v(" "),s("li",[e._v("例如：项目安装 "),s("code",[e._v("A")]),e._v("，而 "),s("code",[e._v("A")]),e._v(" 依赖 "),s("code",[e._v("B")]),e._v("，最终目录结构如下：")])]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("node_modules/\n├── A/      # 直接依赖\n└── B/      # 子依赖（本不应被项目直接访问）\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br")])]),s("ul",[s("li",[e._v("此时，如果代码中直接 "),s("code",[e._v("require('B')")]),e._v("，虽然能运行（因为 "),s("code",[e._v("B")]),e._v(" 在 "),s("code",[e._v("node_modules")]),e._v(" 根目录），但 "),s("code",[e._v("B")]),e._v(" 并未在 "),s("code",[e._v("package.json")]),e._v(" 中声明，这就是幽灵依赖。")])]),e._v(" "),s("h2",{attrs:{id:"_2-monorepo-中的依赖提升"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-monorepo-中的依赖提升"}},[e._v("#")]),e._v(" 2. Monorepo 中的依赖提升")]),e._v(" "),s("ul",[s("li",[e._v("在 Monorepo（如 Lerna、Yarn Workspaces）中，子包的依赖可能会被提升到根目录的 "),s("code",[e._v("node_modules")]),e._v("，导致子包直接引用未声明的依赖。")])])])}),[],!1,null,null,null);s.default=a.exports}}]);