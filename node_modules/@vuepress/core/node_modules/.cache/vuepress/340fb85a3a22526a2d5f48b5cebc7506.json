{"remainingRequest":"/home/runner/work/triggergun.github.io/triggergun.github.io/node_modules/cache-loader/dist/cjs.js??ref--3-0!/home/runner/work/triggergun.github.io/triggergun.github.io/node_modules/babel-loader/lib/index.js??ref--3-1!/home/runner/work/triggergun.github.io/triggergun.github.io/node_modules/vue-loader/lib/loaders/templateLoader.js??ref--6!/home/runner/work/triggergun.github.io/triggergun.github.io/node_modules/cache-loader/dist/cjs.js??ref--1-0!/home/runner/work/triggergun.github.io/triggergun.github.io/node_modules/vue-loader/lib/index.js??ref--1-1!/home/runner/work/triggergun.github.io/triggergun.github.io/node_modules/@vuepress/markdown-loader/index.js??ref--1-2!/home/runner/work/triggergun.github.io/triggergun.github.io/docs/front_end/roadmap/demo01_2025_10_02_01.md?vue&type=template&id=74c02f80","dependencies":[{"path":"/home/runner/work/triggergun.github.io/triggergun.github.io/docs/front_end/roadmap/demo01_2025_10_02_01.md","mtime":1759404929099},{"path":"/home/runner/work/triggergun.github.io/triggergun.github.io/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/runner/work/triggergun.github.io/triggergun.github.io/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/runner/work/triggergun.github.io/triggergun.github.io/node_modules/babel-loader/lib/index.js","mtime":456789000000},{"path":"/home/runner/work/triggergun.github.io/triggergun.github.io/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/home/runner/work/triggergun.github.io/triggergun.github.io/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/runner/work/triggergun.github.io/triggergun.github.io/node_modules/vue-loader/lib/index.js","mtime":499162500000},{"path":"/home/runner/work/triggergun.github.io/triggergun.github.io/node_modules/@vuepress/markdown-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:dmFyIHJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHsKICB2YXIgX3ZtID0gdGhpcywKICAgIF9jID0gX3ZtLl9zZWxmLl9jOwogIHJldHVybiBfYygnQ29udGVudFNsb3RzRGlzdHJpYnV0b3InLCB7CiAgICBhdHRyczogewogICAgICAic2xvdC1rZXkiOiBfdm0uJHBhcmVudC5zbG90S2V5CiAgICB9CiAgfSwgW19jKCdoMScsIHsKICAgIGF0dHJzOiB7CiAgICAgICJpZCI6ICJfMjAyNeW5tOWJjeerr3Z1ZeeahOWtpuS5oOi3r+e6vyIKICAgIH0KICB9LCBbX2MoJ2EnLCB7CiAgICBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLAogICAgYXR0cnM6IHsKICAgICAgImhyZWYiOiAiI18yMDI15bm05YmN56uvdnVl55qE5a2m5Lmg6Lev57q/IgogICAgfQogIH0sIFtfdm0uX3YoIiMiKV0pLCBfdm0uX3YoIiAyMDI15bm05YmN56uvVnVl55qE5a2m5Lmg6Lev57q/IildKSwgX3ZtLl92KCIgIiksIF9jKCdoMicsIHsKICAgIGF0dHJzOiB7CiAgICAgICJpZCI6ICLnrKzkuIDmraUt5Z+656GA56+HIgogICAgfQogIH0sIFtfYygnYScsIHsKICAgIHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsCiAgICBhdHRyczogewogICAgICAiaHJlZiI6ICIj56ys5LiA5q2lLeWfuuehgOevhyIKICAgIH0KICB9LCBbX3ZtLl92KCIjIildKSwgX3ZtLl92KCIg56ys5LiA5q2lKeWfuuehgOevhyIpXSksIF92bS5fdigiICIpLCBfYygncCcsIFtfdm0uX3YoIuWtpuWlve+8mmh0bWzjgIFjc3PjgIFqc+i/meS4qumdnuW4uOmHjeimgeOAgiIpXSksIF92bS5fdigiICIpLCBfYygnaDInLCB7CiAgICBhdHRyczogewogICAgICAiaWQiOiAi56ys5LqM5q2lLeWJjeerr+ahhuaetiIKICAgIH0KICB9LCBbX2MoJ2EnLCB7CiAgICBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLAogICAgYXR0cnM6IHsKICAgICAgImhyZWYiOiAiI+esrOS6jOatpS3liY3nq6/moYbmnrYiCiAgICB9CiAgfSwgW192bS5fdigiIyIpXSksIF92bS5fdigiIOesrOS6jOatpSnliY3nq6/moYbmnrYiKV0pLCBfdm0uX3YoIiAiKSwgX2MoJ3AnLCBbX3ZtLl92KCLkvJrkuobnrKzkuIDmraXnmoTnn6Xor4bov5nov5jlj6rmmK/liJrliJrlvIDlp4vjgILmjqXkuIvmnaXmiJHku6zopoHov5vooYzmoYbmnrbnmoTlrabkuaDjgILopoHmg7PlgZrlh7rog73nlKjnmoTkuJzopb/lpITnkIbpgqPlv4XpobvnrYnnu6fnu63lrabkuaDjgIIiKV0pLCBfdm0uX3YoIiAiKSwgX2MoJ3AnLCBbX3ZtLl92KCJ2dWXlrpjmlrnlnLDlnYDjgIIiKV0pLCBfdm0uX3YoIiAiKSwgX2MoJ3AnLCBbX2MoJ2EnLCB7CiAgICBhdHRyczogewogICAgICAiaHJlZiI6ICJodHRwczovL2NuLnZ1ZWpzLm9yZy8iLAogICAgICAidGFyZ2V0IjogIl9ibGFuayIsCiAgICAgICJyZWwiOiAibm9vcGVuZXIgbm9yZWZlcnJlciIKICAgIH0KICB9LCBbX3ZtLl92KCJWdWUuanMgLSDmuJDov5vlvI8gSmF2YVNjcmlwdCDmoYbmnrYgfCBWdWUuanMiKSwgX2MoJ091dGJvdW5kTGluaycpXSwgMSldKSwgX3ZtLl92KCIgIiksIF9jKCdwJywgW19jKCdpbWcnLCB7CiAgICBhdHRyczogewogICAgICAic3JjIjogcmVxdWlyZSgiLi9kZW1vMDFfMjAyNV8xMF8wMl8wMS5hc3NldHMvaW1hZ2UtMjAyNTEwMDIxODQzMDg5OTcucG5nIiksCiAgICAgICJhbHQiOiAiaW1hZ2UtMjAyNTEwMDIxODQzMDg5OTciCiAgICB9CiAgfSldKSwgX3ZtLl92KCIgIiksIF9jKCdoMicsIHsKICAgIGF0dHJzOiB7CiAgICAgICJpZCI6ICLnrKzkuInmraUtdnVl5bel5YW35bqTdnVldXNlIgogICAgfQogIH0sIFtfYygnYScsIHsKICAgIHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsCiAgICBhdHRyczogewogICAgICAiaHJlZiI6ICIj56ys5LiJ5q2lLXZ1ZeW3peWFt+W6k3Z1ZXVzZSIKICAgIH0KICB9LCBbX3ZtLl92KCIjIildKSwgX3ZtLl92KCIg56ys5LiJ5q2lKXZ1ZeW3peWFt+W6k1Z1ZVVzZSIpXSksIF92bS5fdigiICIpLCBfYygncCcsIFtfYygnYScsIHsKICAgIGF0dHJzOiB7CiAgICAgICJocmVmIjogImh0dHBzOi8vdnVldXNlLm9yZy8iLAogICAgICAidGFyZ2V0IjogIl9ibGFuayIsCiAgICAgICJyZWwiOiAibm9vcGVuZXIgbm9yZWZlcnJlciIKICAgIH0KICB9LCBbX3ZtLl92KCJWdWVVc2UiKSwgX2MoJ091dGJvdW5kTGluaycpXSwgMSldKSwgX3ZtLl92KCIgIiksIF9jKCdwJywgW19jKCdpbWcnLCB7CiAgICBhdHRyczogewogICAgICAic3JjIjogcmVxdWlyZSgiLi9kZW1vMDFfMjAyNV8xMF8wMl8wMS5hc3NldHMvaW1hZ2UtMjAyNTEwMDIxODQ5MDk1NTUucG5nIiksCiAgICAgICJhbHQiOiAiaW1hZ2UtMjAyNTEwMDIxODQ5MDk1NTUiCiAgICB9CiAgfSldKSwgX3ZtLl92KCIgIiksIF9jKCdwJywgW192bS5fdigi5LuA5LmI5pivVnVlVXNl77yfIildKSwgX3ZtLl92KCIgIiksIF9jKCdwJywgW192bS5fdigiVnVlVXNlIGlzIGEgY29sbGVjdGlvbiBvZiB1dGlsaXR5IGZ1bmN0aW9ucyBiYXNlZCBvbiAiKSwgX2MoJ2EnLCB7CiAgICBhdHRyczogewogICAgICAiaHJlZiI6ICJodHRwczovL3Z1ZWpzLm9yZy9ndWlkZS9leHRyYXMvY29tcG9zaXRpb24tYXBpLWZhcS5odG1sIiwKICAgICAgInRhcmdldCI6ICJfYmxhbmsiLAogICAgICAicmVsIjogIm5vb3BlbmVyIG5vcmVmZXJyZXIiCiAgICB9CiAgfSwgW192bS5fdigiQ29tcG9zaXRpb24gQVBJIiksIF9jKCdPdXRib3VuZExpbmsnKV0sIDEpLCBfdm0uX3YoIi4gV2UgYXNzdW1lIHlvdSBhcmUgYWxyZWFkeSBmYW1pbGlhciB3aXRoIHRoZSBiYXNpYyBpZGVhcyBvZiAiKSwgX2MoJ2EnLCB7CiAgICBhdHRyczogewogICAgICAiaHJlZiI6ICJodHRwczovL3Z1ZWpzLm9yZy9ndWlkZS9leHRyYXMvY29tcG9zaXRpb24tYXBpLWZhcS5odG1sIiwKICAgICAgInRhcmdldCI6ICJfYmxhbmsiLAogICAgICAicmVsIjogIm5vb3BlbmVyIG5vcmVmZXJyZXIiCiAgICB9CiAgfSwgW192bS5fdigiQ29tcG9zaXRpb24gQVBJIiksIF9jKCdPdXRib3VuZExpbmsnKV0sIDEpLCBfdm0uX3YoIiBiZWZvcmUgeW91IGNvbnRpbnVlLiIpXSksIF92bS5fdigiICIpLCBfYygncCcsIFtfdm0uX3YoIuetlO+8mlZ1ZVVzZSDmmK/ln7rkuo4gIiksIF9jKCdhJywgewogICAgYXR0cnM6IHsKICAgICAgImhyZWYiOiAiaHR0cHM6Ly92dWVqcy5vcmcvZ3VpZGUvZXh0cmFzL2NvbXBvc2l0aW9uLWFwaS1mYXEuaHRtbCIsCiAgICAgICJ0YXJnZXQiOiAiX2JsYW5rIiwKICAgICAgInJlbCI6ICJub29wZW5lciBub3JlZmVycmVyIgogICAgfQogIH0sIFtfdm0uX3YoIkNvbXBvc2l0aW9uIEFQSSDnmoQiKSwgX2MoJ091dGJvdW5kTGluaycpXSwgMSksIF92bS5fdigi5a6e55So5Ye95pWw6ZuG5ZCI44CC5Zyo57un57ut5LmL5YmN77yM5oiR5Lus5YGH6K6+5L2g5bey57uP54af5oKJICIpLCBfYygnYScsIHsKICAgIGF0dHJzOiB7CiAgICAgICJocmVmIjogImh0dHBzOi8vdnVlanMub3JnL2d1aWRlL2V4dHJhcy9jb21wb3NpdGlvbi1hcGktZmFxLmh0bWwiLAogICAgICAidGFyZ2V0IjogIl9ibGFuayIsCiAgICAgICJyZWwiOiAibm9vcGVuZXIgbm9yZWZlcnJlciIKICAgIH0KICB9LCBbX3ZtLl92KCJDb21wb3NpdGlvbiBBUEkiKSwgX2MoJ091dGJvdW5kTGluaycpXSwgMSksIF92bS5fdigiIOeahOWfuuacrOamguW/teOAgiIpXSksIF92bS5fdigiICIpLCBfYygncCcsIFtfYygnaW1nJywgewogICAgYXR0cnM6IHsKICAgICAgInNyYyI6IHJlcXVpcmUoIi4vZGVtbzAxXzIwMjVfMTBfMDJfMDEuYXNzZXRzL2ltYWdlLTIwMjUxMDAyMTg1MTMxNDg3LnBuZyIpLAogICAgICAiYWx0IjogImltYWdlLTIwMjUxMDAyMTg1MTMxNDg3IgogICAgfQogIH0pXSksIF92bS5fdigiICIpLCBfYygncCcsIFtfdm0uX3YoIuWumOaWueinhumikeWtpuS5oOWcsOWdgO+8miIpLCBfYygnYScsIHsKICAgIGF0dHJzOiB7CiAgICAgICJocmVmIjogImh0dHBzOi8vdnVlc2Nob29sLmlvL2NvdXJzZXMvdnVldXNlLWZvci1ldmVyeW9uZT9mcmllbmQ9dnVldXNlIiwKICAgICAgInRhcmdldCI6ICJfYmxhbmsiLAogICAgICAicmVsIjogIm5vb3BlbmVyIG5vcmVmZXJyZXIiCiAgICB9CiAgfSwgW192bS5fdigiVnVlVXNlIGZvciBFdmVyeW9uZTogVW5sb2NrIFZ1ZS5qcyBDb21wb3NpdGlvbiBQb3dlciIpLCBfYygnT3V0Ym91bmRMaW5rJyldLCAxKV0pLCBfdm0uX3YoIiAiKSwgX2MoJ2gyJywgewogICAgYXR0cnM6IHsKICAgICAgImlkIjogIuesrOWbm+atpS1jc3PmoLflvI/moYbmnrYiCiAgICB9CiAgfSwgW19jKCdhJywgewogICAgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwKICAgIGF0dHJzOiB7CiAgICAgICJocmVmIjogIiPnrKzlm5vmraUtY3Nz5qC35byP5qGG5p62IgogICAgfQogIH0sIFtfdm0uX3YoIiMiKV0pLCBfdm0uX3YoIiDnrKzlm5vmraUpY3Nz5qC35byP5qGG5p62IildKSwgX3ZtLl92KCIgIiksIF9jKCdwJywgW192bS5fdigidGFpbHdpbmRjc3PvvIzmiJEyMDI15bm0MTDmnIjnspjotLTnmoTnvZHlnYDjgIIiKV0pLCBfdm0uX3YoIiAiKSwgX2MoJ3AnLCBbX2MoJ2EnLCB7CiAgICBhdHRyczogewogICAgICAiaHJlZiI6ICJodHRwczovL3RhaWx3aW5kY3NzLmNvbS9ibG9nL3RhaWx3aW5kY3NzLXY0IiwKICAgICAgInRhcmdldCI6ICJfYmxhbmsiLAogICAgICAicmVsIjogIm5vb3BlbmVyIG5vcmVmZXJyZXIiCiAgICB9CiAgfSwgW192bS5fdigiVGFpbHdpbmQgQ1NTIHY0LjAgLSBUYWlsd2luZCBDU1MiKSwgX2MoJ091dGJvdW5kTGluaycpXSwgMSldKSwgX3ZtLl92KCIgIiksIF9jKCdwJywgW19jKCdpbWcnLCB7CiAgICBhdHRyczogewogICAgICAic3JjIjogcmVxdWlyZSgiLi9kZW1vMDFfMjAyNV8xMF8wMl8wMS5hc3NldHMvaW1hZ2UtMjAyNTEwMDIxODQxNDIxOTAucG5nIiksCiAgICAgICJhbHQiOiAiaW1hZ2UtMjAyNTEwMDIxODQxNDIxOTAiCiAgICB9CiAgfSldKSwgX3ZtLl92KCIgIiksIF9jKCdoMicsIHsKICAgIGF0dHJzOiB7CiAgICAgICJpZCI6ICLnrKzkupTmraUt5YmN56uv6aG555uu5omT5YyF5qGG5p62IgogICAgfQogIH0sIFtfYygnYScsIHsKICAgIHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsCiAgICBhdHRyczogewogICAgICAiaHJlZiI6ICIj56ys5LqU5q2lLeWJjeerr+mhueebruaJk+WMheahhuaetiIKICAgIH0KICB9LCBbX3ZtLl92KCIjIildKSwgX3ZtLl92KCIg56ys5LqU5q2lKeWJjeerr+mhueebruaJk+WMheahhuaetiIpXSksIF92bS5fdigiICIpLCBfYygncCcsIFtfdm0uX3YoInZpdGXvvIzmiJEyMDI15bm0MTDmnIjnspjotLTnmoTnvZHlnYDjgILogIHnmoTpobnnm67pg73mmK/kvb/nlKh3ZWJwYWNr44CCIildKSwgX3ZtLl92KCIgIiksIF9jKCdwJywgW19jKCdhJywgewogICAgYXR0cnM6IHsKICAgICAgImhyZWYiOiAiaHR0cHM6Ly92aXRlanMuY24vdml0ZTMtY24vZ3VpZGUvIiwKICAgICAgInRhcmdldCI6ICJfYmxhbmsiLAogICAgICAicmVsIjogIm5vb3BlbmVyIG5vcmVmZXJyZXIiCiAgICB9CiAgfSwgW192bS5fdigi5byA5aeLIHwgVml0ZSDlrpjmlrnkuK3mlofmlofmoaMiKSwgX2MoJ091dGJvdW5kTGluaycpXSwgMSldKSwgX3ZtLl92KCIgIiksIF9jKCdwJywgW19jKCdpbWcnLCB7CiAgICBhdHRyczogewogICAgICAic3JjIjogcmVxdWlyZSgiLi9kZW1vMDFfMjAyNV8xMF8wMl8wMS5hc3NldHMvaW1hZ2UtMjAyNTEwMDIxODQyNDQxMjYucG5nIiksCiAgICAgICJhbHQiOiAiaW1hZ2UtMjAyNTEwMDIxODQyNDQxMjYiCiAgICB9CiAgfSldKV0pOwp9Owp2YXIgc3RhdGljUmVuZGVyRm5zID0gW107CmV4cG9ydCB7IHJlbmRlciwgc3RhdGljUmVuZGVyRm5zIH07"},null]}