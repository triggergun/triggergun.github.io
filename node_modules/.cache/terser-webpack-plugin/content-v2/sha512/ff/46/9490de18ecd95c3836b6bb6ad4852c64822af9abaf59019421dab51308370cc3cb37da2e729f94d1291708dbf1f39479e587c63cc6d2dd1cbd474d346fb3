{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[221],{1892:function(t,s,a){\"use strict\";a.r(s);var n=a(18),i=Object(n.a)({},(function(){var t=this,s=t._self._c;return s(\"ContentSlotsDistributor\",{attrs:{\"slot-key\":t.$parent.slotKey}},[s(\"h1\",{attrs:{id:\"unity的组件式编程\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#unity的组件式编程\"}},[t._v(\"#\")]),t._v(\" unity的组件式编程\")]),t._v(\" \"),s(\"p\",[t._v(\"不同的功能看成不同的组件。\")]),t._v(\" \"),s(\"p\",[t._v(\"通过组合的方式实现功能的扩展和变化。\")]),t._v(\" \"),s(\"p\",[t._v(\"举例子：比如我们有一个脚本执行任务A，另外一个脚本执行任务b，同时将二个脚本加载到通一个游戏对象上，那么该游戏对象即可以\"),s(\"font\",{attrs:{color:\"red\"}},[t._v(\"同时执行\")]),t._v(\"A和B任务。如果我们还要新扩展一个C任务呢？我们只需要添加一个执行C任务的脚本就可以。\")],1),t._v(\" \"),s(\"h2\",{attrs:{id:\"组件的获取\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#组件的获取\"}},[t._v(\"#\")]),t._v(\" 组件的获取\")]),t._v(\" \"),s(\"div\",{staticClass:\"language-c# line-numbers-mode\"},[s(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[s(\"code\",[t._v(\"        Rigidbody rigid = this.gameObject.GetComponent<Rigidbody>();\\n        if (rigid == null) \\n        {\\n            rigid = this.gameObject.AddComponent<Rigidbody>();\\n        }\\n\")])]),t._v(\" \"),s(\"div\",{staticClass:\"line-numbers-wrapper\"},[s(\"span\",{staticClass:\"line-number\"},[t._v(\"1\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"2\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"3\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"4\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"5\")]),s(\"br\")])]),s(\"p\",[t._v(\"代码执行后可以在inspector的面板看到添加了一个Rigidbody组件。\")]),t._v(\" \"),s(\"p\",[s(\"img\",{attrs:{src:a(388),alt:\"image-20250824095451324\"}})])])}),[],!1,null,null,null);s.default=i.exports},388:function(t,s,a){t.exports=a.p+\"assets/img/image-20250824095451324.196b4386.png\"}}]);","extractedComments":[]}